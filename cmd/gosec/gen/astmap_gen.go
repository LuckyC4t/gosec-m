package main

import (
	"fmt"
	jen "github.com/dave/jennifer/jen"
	"go/types"
	"golang.org/x/tools/go/loader"
)

func main() {
	// 代码生成器初始化
	f := jen.NewFile("js2gosec")
	f.HeaderComment("Code generated by jennifer (github.com/dave/jennifer), DO NOT EDIT")

	// 获取ast.Node的实现
	conf := &loader.Config{}
	conf.Import("go/ast")
	lprog, _ := conf.Load()
	pkg := lprog.InitialPackages()[0]
	scope := pkg.Pkg.Scope()
	astNode := scope.Lookup("Node")
	astNodeInterface := astNode.Type().Underlying().(*types.Interface)

	implements := []string{}
	for _, n := range scope.Names() {
		if n == astNode.Name() {
			continue
		}

		obj := scope.Lookup(n)

		// Only types, not variables/constants
		if typ, ok := obj.(*types.TypeName); ok {
			pointerType := types.NewPointer(typ.Type())
			fn, _ := types.MissingMethod(pointerType, astNodeInterface, true)
			if fn == nil {
				implements = append(implements, fmt.Sprintf("%s.%s", typ.Pkg().Name(), typ.Name()))
			}
		}
	}

	// 生成case部分
	switchBlockStmts := []jen.Code{}
	for _, impl := range implements {
		switchBlockStmts = append(switchBlockStmts, jen.Case(jen.Lit("*"+impl)).Block(
			jen.Id("node").Op("=").Id("new").Call(jen.Id(impl)),
		),
		)
	}

	// 生成函数body部分
	blockStmts := []jen.Code{
		jen.Var().Id("node").Qual("go/ast", "Node"),
		jen.Comment("实现ast.Node两个方法的调用者都是指针类型"),
		jen.Switch(jen.Id("typename")).Block(switchBlockStmts...),
		jen.Return(jen.Id("node")),
	}

	// 生成函数
	f.Func().Id("GetNewAstNodeByType").
		Params(jen.Id("typename").String()).
		Qual("go/ast", "Node").Block(blockStmts...)

	f.Save("../../internal/js2gosec/astmap.go")
}
